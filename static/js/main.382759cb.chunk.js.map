{"version":3,"sources":["Dashboard.js","Login.js","App.js","reportWebVitals.js","index.js"],"names":["columnList","0","name","items","id","uuidv4","user","description","1","2","3","containerStyle","display","justifyContent","height","background","columnContainerStyle","flexDirection","alignItems","columnStyle","padding","width","minHeight","taskStyle","boxShadow","borderRadius","userSelect","margin","Dashboard","useState","columns","setColumns","editTasks","e","columnIndex","taskIndex","key","newColumns","target","value","style","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","splice","index","removed","column","copiedItems","Object","entries","map","columnId","provided","snapshot","droppableProps","ref","innerRef","disableInteractiveElementBlocking","draggableId","draggableProps","dragHandleProps","backgroundColor","isDragging","color","border","overflow","fontFamily","fontSize","type","rows","placeholder","defaultValue","onMouseOut","inputTextStyle","boxSizing","submitButton","cursor","Login","username","setUsername","password","setPassword","showDashboard","setDashboard","minWidth","required","onChange","onClick","preventDefault","toast","error","success","setTimeout","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","App","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.382759cb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nlet taskList = [\r\n  { id: uuidv4(), user: \"Harvey\", description:\"When you're backed against the wall, break the goddamn thing down.\" },\r\n  { id: uuidv4(), user: \"Mike\",  description:\"You Put Your Interests Above Mine, And I’m Putting Them Back Up Next To Yours\" },\r\n  { id: uuidv4(), user: \"Louis\",description:\"A weapon? They're my nail scissors you... . They're gold plated. They cost $2000.00.\" },\r\n  { id: uuidv4(), user: \"Jessica\" , description:\"When you work with tigers, once in a while they're gonna take a swipe at you.\"}\r\n];\r\n\r\nconst columnList = {\r\n  0: {\r\n    name: \"Requested\",\r\n    items: taskList\r\n  },\r\n  1: {\r\n    name: \"To do\",\r\n    items: []\r\n  },\r\n  2: {\r\n    name: \"In Progress\",\r\n    items: []\r\n  },\r\n  3: {\r\n    name: \"Done\",\r\n    items: []\r\n  }\r\n};\r\n\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst containerStyle = {\r\n   display: \"flex\", justifyContent: \"center\", height: \"100%\", background: \"white\" \r\n}\r\n\r\nconst columnContainerStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\"\r\n}\r\n\r\nconst columnStyle = {\r\n  padding: 4,\r\n  width: 250,\r\n  minHeight: 500\r\n}\r\n\r\nconst taskStyle = {\r\n  boxShadow: \"0 2px 4px 0 rgba(0,0,0,0.2)\",\r\n                                      borderRadius: \"6px\",\r\n                                      userSelect: \"none\",\r\n                                      padding: 20,\r\n                                      display:'flex',\r\n                                      flexDirection:'column',\r\n                                      margin: \"0 0 5px 0\",\r\n                                      height: \"fit-content\",\r\n                                      justifyContent:\"space-around\",\r\n}\r\n\r\nfunction Dashboard() {\r\n  const [columns, setColumns] = useState(columnList);\r\n\r\n  const editTasks = (e, columnIndex, taskIndex, key) => {\r\n    const newColumns = columns;\r\n    key == 0 ? newColumns.[columnIndex].items[taskIndex].user = e.target.value:newColumns.[columnIndex].items[taskIndex].description = e.target.value; \r\n    setColumns(newColumns)\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <DragDropContext\r\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\r\n      >\r\n        {Object.entries(columns).map(([columnId, column], columnIndex) => {\r\n          return (\r\n            <div\r\n              style={columnContainerStyle}\r\n              key={columnId}\r\n            >\r\n              <h2>{column.name}</h2>\r\n              <div style={{ margin: 8 }}>\r\n                <Droppable droppableId={columnId} key={columnId}>\r\n                  {(provided, snapshot) => {\r\n                    return (\r\n                      <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={columnStyle}\r\n                      >\r\n                        {column.items.map(({ id, user, description }, index) => {\r\n                          return (\r\n                            <Draggable\r\n                              disableInteractiveElementBlocking={false}\r\n                              key={id}\r\n                              draggableId={id}\r\n                              index={index}\r\n                            >\r\n                              {(provided, snapshot) => {\r\n                                return (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                    style={{\r\n                                      \r\n                                      backgroundColor: snapshot.isDragging\r\n                                        ? \"lightgrey\"\r\n                                        : \"white\",\r\n                                      color: \"black\",\r\n                                      ...provided.draggableProps.style,\r\n                                      ...taskStyle\r\n                                    }}\r\n                                  >\r\n                                    <textarea\r\n                                      style={{border:\"none\", overflow:\"hidden\", fontFamily:\"Arial\", fontSize:\"12px\"}}\r\n                                      type=\"text\"\r\n                                      rows={3}\r\n                                      placeholder=\"Write a task name\"\r\n                                      defaultValue={description}\r\n                                      onMouseOut={e=>editTasks(e, columnIndex, index, 1)}\r\n                                    />\r\n                                    <input\r\n                                      style={{border:\"none\"}}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Write a task name\"\r\n                                      defaultValue={user}\r\n                                      onMouseOut={e=>editTasks(e, columnIndex, index, 0)}\r\n                                    />\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            </Draggable>\r\n                          );\r\n                        })}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { useState } from \"react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Dashboard from \"./Dashboard\";\r\n\r\n\r\nconst inputTextStyle = {\r\n    width: \"75%\",\r\n    padding: \"12px 20px\",\r\n    margin: \"8px 0\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"6px\",\r\n    boxSizing: \"border-box\",\r\n}\r\n\r\nconst submitButton = {\r\n    width: \"75%\",\r\n    backgroundColor: \"black\",\r\n    color: \"white\",\r\n    padding: \"14px 20px\",\r\n    margin: \"8px 0\",\r\n    border: \"none\",\r\n    borderRadius: \"6px\",\r\n    cursor: \"pointer\"\r\n}\r\n\r\nfunction Login() {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [showDashboard, setDashboard] = useState(false);\r\n    const notify = (e) => {\r\n        e.preventDefault();\r\n        if (username !== \"ashwin\" || password !== \"ashwin\")\r\n            toast.error(\"Wrong details!🤨\")\r\n        else {\r\n            toast.success(\"Welcome to the Board!😁\")\r\n            setTimeout(() => { setDashboard(true) }, 4000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        showDashboard ? <Dashboard /> : <form\r\n            style={{\r\n                boxShadow: \"0 2px 4px 0 rgba(0,0,0,0.2)\",\r\n                borderRadius: \"6px\",\r\n                padding: 20,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                minHeight: \"400px\",\r\n                minWidth: \"400px\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                color: \"black\"\r\n            }}\r\n        >\r\n\r\n            <h2>Login</h2>\r\n            <input placeholder=\"Username\" required style={inputTextStyle} onChange={e => setUsername(e.target.value)} />\r\n            <input placeholder=\"Password\" type=\"password\" required style={inputTextStyle} onChange={e => setPassword(e.target.value)} />\r\n            <button style={submitButton} onClick={notify}>Submit</button>\r\n            <ToastContainer position=\"bottom-right\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport Login from \"./Login\";\nfunction App() {\n  return <div style={{display:\"flex\", justifyContent:\"center\", marginTop:\"48px\" }}><Login/></div>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}